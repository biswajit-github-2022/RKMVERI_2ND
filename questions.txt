Medium:
--Implement a function to find the longest palindrome substring within a string.

--Write a program to generate a spiral matrix of size NÃ—N. The matrix should be filled with numbers in a spiral pattern, starting from 1 and incrementing in a clockwise direction.

--There are n doors (1,2,..N) . initially all are closed . 
In first round we alter the states of the door numbered 1,2,3,..N.
In second round we alter the states of the door numbered 2,4,6,...
In Third round we alter the states of the door numbered 3,6,9,... and so on ...
We continue till Nth term in which you only alter the state of N-th door. Find number of open doors at the end of the procedure. 
ex: N=3->1,N=100->10

--Given a triangle array, return the minimum path sum from top to bottom.
For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.
Input: triangle = [2,3,4,6,5,7,4,1,8,3]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
Dont have to print the triangle




Hard:
--Creatnx now wants to decorate his house by flower pots. He plans to buy exactly N pots from Triracle's shop.
There are only two kind of flower pots available in that shop. The shop is very strange. If you buy X flower pots of kind 1 then you must pay 
 A*X^2 and if you buy Y flower pots of kind 2 you must pay B*Y^2. Please help Creatnx buys exactly N flower pots that minimizes money he pays.

Input Format
N,A,B
Output Format
price

Sample Input
5 1 2
Sample Output
17

Sample Input
10 2 4
Sample Output
134

Constraint: Try to do in constant time complexity

--You are given an array prices where prices[i] is the price of a given stock on the ith day.
Find the maximum profit you can achieve. You may complete at most two transactions.
Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
Example 1:
Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
Constraints:
1 <= prices.length <= 105
0 <= prices[i] <= 105